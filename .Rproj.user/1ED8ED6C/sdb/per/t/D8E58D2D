{
    "collab_server" : "",
    "contents" : "rm(list=ls())\nlibrary(Reumannplatz)\n\n######### get data ready ############\nDS.two<-readRDS(\"Data_TwoLayers.RDS\")\nfor(i.season in 1:4){\n  for(f in 1:3){\n    tmp<-CleanData(DS.two[[i.season]][[1]][[f]], normalize=T, each.ts=T, rescale=T, do.plot=F)\n    DS.two[[i.season]][[1]][[f]]<-tmp$cleandat\n    tmp<-CleanData(DS.two[[i.season]][[2]][[f]], normalize=T, detrend=T, rescale=T, do.plot=F)\n    DS.two[[i.season]][[2]][[f]]<-tmp$cleandat\n  }\n}\nsaveRDS(DS.two,\"Data_TwoLayers_clean.RDS\")\n\n\n########### Wavelet multiple linear regression ###########\nds.two<-readRDS(\"Data_TwoLayers_clean.RDS\")\ni.season<-2 #spring\nds.two<-ds.two[[i.season]]\n\ndists<-readRDS(\"res_distance_from_shore.RDS\")\ni1<-which(dists<240) #near-shore\ni2<-which(dists>=240) #off-shore\n\n#offshore\nC.deep<-ds.two[[2]][[3]][i2,]   #Chla.deep\nC.shal<-ds.two[[1]][[3]][i2,]   #Chla.shallow\nT.deep<-ds.two[[2]][[1]][i2,]   #temperature.deep\nN.deep<-ds.two[[2]][[2]][i2,]   #nutrite.deep\n\nX<-list(C.deep=C.deep, C.shal=C.shal, T.deep=T.deep, N.deep=N.deep)\n\n###########################################################\n################## three predictors ########################\n#########################################################\n\n######## wavelet multiple linear regression ###########\nsource('Fn_wmrsig.test.R')\ntsranges2<-matrix(c(2,12, 2,4, 4,12), 3,2, byrow=T)  # all, short (2-4), long (4-12)\nans.sC<-wmrsig(X, r=1, n=3, s=2, n.surrog = 10000, surr.test = T, surr.type=\"fft\", tsranges = tsranges2) #surrogate C\nans.sTN<-wmrsig.twos(X, r=1, n=3, s=c(3,4), n.surrog = 10000, surr.test = T, surr.type=\"fft\", tsranges = tsranges2) #surrogate T&N\nans.oC<-wmrsig(X[1:2], r=1, n=1, s=2, n.surrog = 10000, surr.test = T, surr.type=\"fft\", tsranges = tsranges2)  #only contain C\nans.oTN<-wmrsig.twos(X[c(1,3,4)], r=1, n=2, s=c(2,3), n.surrog = 10000, surr.test = T, surr.type=\"fft\", tsranges = tsranges2)  #only contain T&N\nans<-list(sC=ans.sC, sTN=ans.sTN, oC=ans.oC, oTN=ans.oTN)\nsaveRDS(ans, \"res_wmrsig_three.RDS\")\n\n#plot\nans<-readRDS(\"res_wmrsig_three.RDS\")\n\ntiff(\"Fig_wmrsig_three.tif\", width=5, height=8, units=\"in\",res=300,compression = \"lzw\")\nop<-par(mfrow=c(2,1), oma=c(1,1,1,1), mar=c(3,3,1,1),mgp=c(2,0.5,0))\nnames.panel<-c(\"both\",\"solely\")\nfor(i in 1:2){\n  ans1<-ans[[2*i-1]]  #sC\n  ans2<-ans[[2*i]]  #sTN\n  plot(ans1$timescales, ans1$pval, typ=\"l\", col=\"blue\", ylim=c(0,1),xlab=\"timescale\", ylab=\"p-value\", cex.lab=1.3)\n  lines(ans2$timescales, ans2$pval, col=\"red\")\n  lines(c(0,20),c(0.05, 0.05), lty=\"dashed\")\n  mtext(paste0(\"(\",letters[i],\") \", names.panel[i]), side=3, adj=0.02, line=-1.2, cex=0.9)\n  if(i==2){legend(\"topright\", legend=c(\"surr Chl.shallow\", \"surr T.deep\"), lty=\"solid\", col=c(\"blue\",\"red\"), horiz=F, cex=1)}\n}\npar(op)\ndev.off()\n\n\n################# matrix regression ##############\nY<-lapply(X, synmat, method=\"pearson\")   #list of correlation matrix\n\nmodelnames<-list(2, c(3,4), c(2,3,4))\nmodelnames<-lapply(modelnames, as.integer)\nans3<-lno.weights(mats=Y[1:4], model.names=modelnames, n=3, nrand=1000, maxruns=1000) \nans4<-summed.weights(varnames=names(Y[1:4]), weights=ans3)\n\nans.mrm<-list(weights=ans3, importance=ans4)\nsaveRDS(ans.mrm, \"res_mrm_three.RDS\")\n\nans.mrm<-readRDS(\"res_mrm_three.RDS\")\n\n###########################################################\n################## two predictors ########################\n#########################################################\n\n########### Wavelet multiple linear regression ###########\ntsranges2<-matrix(c(2,12, 2,4, 4,12), 3,2, byrow=T)  # all, short (2-4), long (4-12)\nans.sC.CT<-wmrsig(X[1:3], r=1, n=2, s=2, n.surrog = 10000, surr.test=T, tsranges=tsranges2)  #surrogate C\nans.sT.CT<-wmrsig(X[1:3], r=1, n=2, s=3, n.surrog = 10000, surr.test=T, tsranges=tsranges2)  #surrogate T\n#seperately\nans.oC<-wmrsig(X[1:2], r=1, n=1, s=2, n.surrog = 10000, surr.test = T, tsranges = tsranges2)  #only contain C\nans.oT<-wmrsig(X[c(1,3)], r=1, n=1, s=2, n.surrog = 10000, surr.test = T, tsranges = tsranges2)  #only contain T\nans<-list(sC.CT=ans.sC.CT, sT.CT=ans.sT.CT, oC=ans.oC, oT=ans.oT)\nsaveRDS(ans, \"res_wmrsig_Chla.shallow_T.deep.RDS\")\n\nans.sC.CN<-wmrsig(X[c(1,2,4)], r=1, n=2, s=2, n.surrog = 10000, surr.test=T, tsranges=tsranges2)  #surrogate C\nans.sN.CN<-wmrsig(X[c(1,2,4)], r=1, n=2, s=3, n.surrog = 10000, surr.test=T, tsranges=tsranges2)  #surrogate N\n#seperately\nans.oC<-wmrsig(X[1:2], r=1, n=1, s=2, n.surrog = 10000, surr.test = T, tsranges = tsranges2)  #only contain C\nans.oN<-wmrsig(X[c(1,4)], r=1, n=1, s=2, n.surrog = 10000, surr.test = T, tsranges = tsranges2)  #only contain N\nans<-list(sC.CN=ans.sC.CN, sN.CN=ans.sN.CN, oC=ans.oC, oN=ans.oN)\nsaveRDS(ans, \"res_wmrsig_Chla.shallow_N.deep.RDS\")\n\n#synexp.Csurf<-modelsyncexp(X[[1]],X[[2]], 1:28, tsrange=c(2,4))\n#synexp.Tdeep<-modelsyncexp(X[[1]],X[[3]], 1:28, tsrange=c(2,4))\n\n#plot\n\ntiff(\"Fig_wmrsig_two.tif\", width=8, height=8, units=\"in\",res=300,compression = \"lzw\")\nop<-par(mfcol=c(2,2), oma=c(1,1,1,1), mar=c(3,3,1,1),mgp=c(2,0.5,0))\nnames.panel<-c(\"both\",\"solely\")\nans<-readRDS('res_wmrsig_Chla.shallow_T.deep.RDS')\nfor(i in 1:2){\n  ans1<-ans[[2*i-1]]  #sC\n  ans2<-ans[[2*i]]  #sT\n  plot(ans1$timescales, ans1$pval, typ=\"l\", col=\"blue\", ylim=c(0,1),xlab=\"timescale\", ylab=\"p-value\", cex.lab=1.3)\n  lines(ans2$timescales, ans2$pval, col=\"red\")\n  lines(c(0,20),c(0.05, 0.05), lty=\"dashed\")\n  mtext(paste0(\"(\",letters[i*2-1],\") \", names.panel[i]), side=3, adj=0.02, line=-1.2, cex=0.9)\n  if(i==2){legend(\"topright\", legend=c(\"surr Chl.shallow\", \"surr T.deep\"), lty=\"solid\", col=c(\"blue\",\"red\"), horiz=F, cex=1.2)}\n}\nans<-readRDS('res_wmrsig_Chla.shallow_N.deep.RDS')\nfor(i in 1:2){\n  ans1<-ans[[2*i-1]]  #sC\n  ans2<-ans[[2*i]]  #sN\n  plot(ans1$timescales, ans1$pval, typ=\"l\", col=\"blue\", ylim=c(0,1),xlab=\"timescale\", ylab=\"p-value\", cex.lab=1.3)\n  lines(ans2$timescales, ans2$pval, col=\"red\")\n  lines(c(0,20),c(0.05, 0.05), lty=\"dashed\")\n  mtext(paste0(\"(\",letters[i*2],\") \", names.panel[i]), side=3, adj=0.02, line=-1.2, cex=0.9)\n  if(i==2){legend(\"topright\", legend=c(\"surr Chl.shallow\", \"surr N.deep\"), lty=\"solid\", col=c(\"blue\",\"red\"), horiz=F, cex=1.2)}\n}\npar(op)\ndev.off()\n\n\n################# matrix regression ##############\n\n#generate one leave-n-out score for a single model\n#ans1<-lno.score(mats=Y[1:3], resp=1, pred=2:3, n=3, maxruns=1000)\n\n#Rank all models for a given response by lno score\n#ans2<-lno.ranking(mats=Y[1:3], n=3, maxruns=1000, rank.mod=T)\n\n#Generate lno weights (frequency of occurrence of a given top model) using resampling procedures\n#ans3<-lno.weights(mats=Y[1:3], model.names=modelnames, n=3, nrand=1000, maxruns=1000) \n\n#calculate importance\n#ans4<-summed.weights(varnames=names(Y[1:3]), weights=ans3)\n\n\n",
    "created" : 1522646149375.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4276292337",
    "id" : "D8E58D2D",
    "lastKnownWriteTime" : 1522816668,
    "last_content_update" : 1522816668624,
    "path" : "D:/Git/CalCOFI/main_TwoLayers_mechanisms.R",
    "project_path" : "main_TwoLayers_mechanisms.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}